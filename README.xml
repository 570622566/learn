<?xml version='1.0' ?><!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<book>
	<title>README</title>
	<chapter id="learn">
		<title>learn  每天一小步,成长一大步</title>
		<para>1:函数式编程学习 及其常用的语法
			2:Netty 经典demo.仔细品味了解异步的、事件驱动的网络应用程序框架</para>
		<para>函数式编程学习笔记</para>
		<literallayout><code>    /**
     * Using stream, you can process data in a declarative way similar to SQL statements
     * 
     * 
     * Using collections framework in Java, a developer has to use loops and make repeated checks.
     *  Another concern is efficiency; as multi-core processors are available at ease,
     *   a Java developer has to write parallel并行 code processing that can be pretty error-prone已于出错.
     * 
     * To resolve such issues, Java 8 introduced the concept of stream that lets the developer to process data declaratively声明的 and leverage multicore architecture without the need to write any specific code for it.
     * 利用多核体系结构,而不需要编写额外的代码
     */
    
    
    /**
     * Stream represents a sequence of objects from a source, which supports aggregate operations.
     * 流表示一系列对象的源头,他支持聚合操作
     */
    
    /**
     * 序列化元素  :一个流提供一系列特定类型的元素序列.一个流能够得到和估算所需要的元素,兵器从不存储
     * 
     * 源头: 流需要集合,数组,io资源进行输入
     * 
     * 流支持聚合操作: 支持聚合操作,像filter过滤,map映射,limit限制,reduce缩减,find查找,match匹配,
     * 
     * 管道化:流操作返回流本身,结果是流水线的.这些操作被称为中间接口操作,他们的方法放入,执行,返回输出到目标,collect()方法是管道流终端的一个结果展示
     * 
     * 自动迭代:流操作进行源头元素进行内部迭代,区别于集合的显示必须的迭代.
     */
    
    /**
     * 有两种方法来生成流:串行和并行
     * 
     * stream() − Returns a sequential stream considering collection as its source.返回顺序流考虑集合作为来源
     * 
     * parallelStream() − Returns a parallel Stream considering collection as its source.返回一个并行流作为来源
     * 
     * 
     * List&lt;String&gt; strings = Arrays.asList("abc", "", "bc", "efg", "abcd","", "jkl");
       List&lt;String&gt; filtered = strings.stream().filter(string -&gt; !string.isEmpty()).collect(Collectors.toList());</code></literallayout>
		<literallayout><code>     */
    
    /**
     * map:The ‘map’ method is used to map each element to its corresponding result. The following code segment prints unique squares of numbers using map.</code></literallayout>
		<literallayout><code>        map表示每个元素映射到相应的结果.
        demo:唯一的数字方块
        
        List&lt;Integer&gt; numbers = Arrays.asList(3, 2, 2, 3, 7, 3, 5);
        //get list of unique squares
        List&lt;Integer&gt; squaresList = numbers.stream().map( i -&gt; i*i).distinct().collect(Collectors.toList());
     * 
     * 类似:filter soretd limit
     */
    
    
    /**
     * 并行管道流:Parallel Processing  是串行的一个替代
     * List&lt;String&gt; strings = Arrays.asList("abc", "", "bc", "efg", "abcd","", "jkl");</code></literallayout>
		<literallayout><code>        int count = strings.parallelStream().filter(string -&gt; string.isEmpty()).count();
        非常容易的 switch between sequential and parallel streams
     * 
     * 
     */
    
    /**
     * Collector:Collectors are used to combine the result of processing on the elements of a stream.
     *  Collectors can be used to return a list or a string.
     * 用于收集元素的执行结果;可返回作为一个list或者字符串
     * 
     * List&lt;String&gt;strings = Arrays.asList("abc", "", "bc", "efg", "abcd","", "jkl");
       List&lt;String&gt; filtered = strings.stream().filter(string -&gt; !string.isEmpty()).collect(Collectors.toList());</code></literallayout>
		<literallayout><code>     * System.out.println("Filtered List: " + filtered);
        String mergedString = strings.stream().filter(string -&gt; !string.isEmpty()).collect(Collectors.joining(", "));
        System.out.println("Merged String: " + mergedString);
     */
    
    /**
     * Statistics:统计数据计算器来介绍当流执行完成时候
     * List&lt;Integer&gt; numbers = Arrays.asList(3, 2, 2, 3, 7, 3, 5);</code></literallayout>
		<literallayout><code>        IntSummaryStatistics stats = integers.stream().mapToInt((x) -&gt; x).summaryStatistics();
        
        System.out.println("Highest number in List : " + stats.getMax());
        System.out.println("Lowest number in List : " + stats.getMin());
        System.out.println("Sum of all numbers : " + stats.getSum());
        System.out.println("Average of all numbers : " + stats.getAverage());
     * 
     */</code></literallayout>
		<para> 		/**
					 * 传统的java.util.date是非线程安全的,开发人员使用的时候,必须使用并发处理问题
					 */</para>
		<literallayout><code>    /**
     * Difficult time zone handling − Developers had to write a lot of code to deal with 			timezone issues. 
     * The new API has been developed keeping domain-specific design in mind.
     * 开发人员必须编写大量的代码来处理时间问题
     * 
     * Java 8 introduces a new date-time API under the package java.time. Following are 			some of the important classes introduced in java.time package 
     * java.time
     */</code></literallayout>
		<para> 		/*
					 * With Java 8, Base64 has finally got its due. Java 8 now has inbuilt encoder and decoder for Base64 			encoding.
					 *  In Java 8, we can use three types of Base64 encoding −
					 * 
					 * 
					 * Simple − Output is mapped to a set of characters lying in A-Za-z0-9+/. The encoder does not add any 			line feed in output, and the decoder rejects any character other than A-Za-z0-9+/.</para>
		<literallayout><code>        URL − Output is mapped to set of characters lying in A-Za-z0-9+_. Output is URL and filename safe.</code></literallayout>
		<literallayout><code>        MIME − Output is mapped to MIME friendly format. Output is represented in lines of no more than 76 characters 			each, and uses a carriage return '\r' followed by a linefeed '\n' as the line separator. No line separator is 			present to the end of the encoded output.
     */</code></literallayout>
	</chapter>
</book>